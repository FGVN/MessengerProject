@page "/"
@inject FindUsersQueryHandler queryHandler

<AuthorizeView>
    <NotAuthorized>
        <h1>Hello, world!</h1>
        Welcome to your new app.
        <SurveyPrompt Title="How is Blazor working for you?" />
    </NotAuthorized>
    <Authorized>

        <form @onsubmit="HandleSearch">
            <MatTextField TValue="string" @bind-Value="Query" Label="Search" Dense="true" />
            <MatTextField TValue="string" @bind-Value="SortBy" Label="Sort By" Dense="true" />
            <MatTextField TValue="string" @bind-Value="SortDirection" Label="Sort Direction" Dense="true" />
            <MatTextField TValue="string" @bind-Value="PropertiesToGet" Label="Properties to Retrieve" Dense="true" />
            <MatButton Type="submit" Raised="true" Dense="true">Search</MatButton>
        </form>

        <MatTable Items="@users">
            <MatTableHeader>
                <th>Username</th>
                <th>Email</th>
            </MatTableHeader>
            <MatTableRow  Context="tableRowContext">
                <td>@tableRowContext.Username</td>
                <td>@tableRowContext.Email</td>
            </MatTableRow>
        </MatTable>
        <MatPagination TotalItems="totalUsersCount" PageSize="PageSize" CurrentPage="PageNumber" OnPageChange="HandlePageChange" />
    </Authorized>
</AuthorizeView>

@code {
    private string Query { get; set; }
    private string SortBy { get; set; }
    private string SortDirection { get; set; }
    private string PropertiesToGet { get; set; }
    private IEnumerable<UserMenuItem> users;
    private int PageNumber = 1;
    private int totalUsersCount;
    private const int PageSize = 10; // Number of items per page

    private async Task HandleSearch()
    {
        PageNumber = 1;
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var findUsersQuery = new FindUsersQuery
        {
            Query = Query,
            SortBy = SortBy,
            SortDirection = SortDirection,
            From = (PageNumber - 1) * PageSize,
            To = PageNumber * PageSize,
            PropertiesToRetrieve = string.IsNullOrWhiteSpace(PropertiesToGet) ? null : PropertiesToGet.Split(',').Select(p => p.Trim())
        };
        var result = await queryHandler.Handle(findUsersQuery, PageNumber);
        users = result; // Assuming the result is a paginated response with 'Items' property containing users
        totalUsersCount = result.Count();
        StateHasChanged();
    }

    private async Task HandlePageChange(int newPageIndex)
    {
        PageNumber = newPageIndex + 1;
        await LoadUsers();
    }
}
